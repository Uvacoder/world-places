{"version":3,"sources":["pages/home/index.js","components/organisms/continents-list/index.js","utils/api.js","components/organisms/continents-form/index.js","pages/continents/index.js","pages/countries/index.js","pages/regions/index.js","pages/cities/index.js","pages/languages/index.js","pages/currencies/index.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","href","ContinentsList","list","length","map","item","key","id","code","name","nativeName","api","axios","create","baseURL","timeout","saveContinent","input","post","ContinentsForm","onSuccess","onError","useState","data","setData","handleSubmit","event","a","preventDefault","handleInput","target","value","onSubmit","type","placeholder","onChange","required","ContinentsPage","continents","setContinents","error","setError","updateContinents","then","res","useEffect","CountriesPage","RegionsPage","CitiesPage","LanguagesPage","CurrenciesPage","App","className","to","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7c9ac8e8.chunk.js","sourcesContent":["import React, { Fragment } from 'react'\r\n\r\nconst HomePage = () => {\r\n  return (\r\n    <Fragment>\r\n      <p>\r\n        Welcome to World Places. A Open Source and human edited resource of all countries, region/states, cities/towns across the world.\r\n        You can update the information any time by cloning <a href=\"https://github.com/jimmyjamieson/world-places\">https://github.com/jimmyjamieson/world-places</a> - making updates into the local data, re-exporting the json, and creating a pull request.\r\n      </p>\r\n      <p>\r\n        You can access the api on <a href=\"http://localhost:4000/api\">http://localhost:4000/api</a> and the docs on <a href=\"http://localhost:4000/docs\">http://localhost:4000/docs</a>\r\n      </p>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default HomePage","import React from 'react'\r\n\r\nconst ContinentsList = ({ list }) => {\r\n  return (\r\n    <ul>\r\n      { list.length > 0 ? list.map((item) => <li key={item.id}>{item.id} {item.code} { item.name } {item.nativeName}</li>) : '...loading' }\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default ContinentsList","import axios from 'axios'\r\n\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:4000/api',\r\n  timeout: 1000000,\r\n});\r\n\r\nexport const getContinents = () => {\r\n  return api('continents');\r\n};\r\n\r\nexport const saveContinent = (input = {}) => {\r\n  return api.post('continents', input)\r\n}","import React, { useState } from 'react';\r\nimport { saveContinent } from '../../../utils/api';\r\n\r\nconst ContinentsForm = ({ onSuccess, onError }) => {\r\n  const [data, setData] = useState(null);\r\n\r\n  const handleSubmit = async event => {\r\n    event.preventDefault();\r\n    try {\r\n      await saveContinent(data);\r\n      onSuccess();\r\n    } catch (e) {\r\n      onError();\r\n    }\r\n  };\r\n\r\n  const handleInput = event => {\r\n    const { target = {} } = event;\r\n    const { name, value } = target;\r\n    setData({\r\n      ...data,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        name=\"code\"\r\n        placeholder=\"Code\"\r\n        onChange={handleInput}\r\n        required\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        placeholder=\"Name\"\r\n        onChange={handleInput}\r\n        required\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        name=\"nativeName\"\r\n        placeholder=\"Native Name\"\r\n        onChange={handleInput}\r\n        required\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        name=\"coords\"\r\n        placeholder=\"2.194216,5.2010515\"\r\n        onChange={handleInput}\r\n        required\r\n      />\r\n      <button type=\"submit\">Save</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ContinentsForm;\r\n","import React, { Fragment, useEffect, useState } from 'react';\r\nimport ContinentsList from '../../components/organisms/continents-list';\r\nimport ContinentsForm from '../../components/organisms/continents-form';\r\nimport { getContinents } from '../../utils/api';\r\n\r\nconst ContinentsPage = () => {\r\n\r\n  const [ continents, setContinents ] = useState([])\r\n  const [ error, setError ] = useState('')\r\n\r\n  const updateContinents = () => {\r\n    getContinents().then(res => setContinents(res.data))\r\n  }\r\n\r\n  useEffect(() => {\r\n    updateContinents()\r\n  }, [])\r\n\r\n  return (\r\n    <Fragment>\r\n      { error && error }\r\n      <ContinentsForm\r\n        onSuccess={ () => updateContinents() }\r\n        onError={ () => setError('Failed to submit') }\r\n      />\r\n      <ContinentsList list={ continents } />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ContinentsPage;\r\n","import React from 'react'\r\n\r\nconst CountriesPage = () => {\r\n  return <div>Countries page</div>\r\n}\r\n\r\nexport default CountriesPage","import React from 'react'\r\n\r\nconst RegionsPage = () => {\r\n  return <div>Regions page</div>\r\n}\r\n\r\nexport default RegionsPage","import React from 'react'\r\n\r\nconst CitiesPage = () => {\r\n  return <div>cities page</div>\r\n}\r\n\r\nexport default CitiesPage","import React from 'react'\r\n\r\nconst LanguagesPage = () => {\r\n  return <div>Languages page</div>\r\n}\r\n\r\nexport default LanguagesPage","import React from 'react'\r\n\r\nconst CurrenciesPage = () => {\r\n  return <div>Currencies page</div>\r\n}\r\n\r\nexport default CurrenciesPage","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\nimport './App.css';\nimport HomePage from './pages/home';\nimport ContinentsPage from './pages/continents';\nimport CountriesPage from './pages/countries';\nimport RegionsPage from './pages/regions';\nimport CitiesPage from './pages/cities';\nimport LanguagesPage from './pages/languages';\nimport CurrenciesPage from './pages/currencies';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Link to=\"/\">Home</Link>\n          <Link to=\"/continents\">Continents</Link>\n          <Link to=\"/countries\">Countries</Link>\n          <Link to=\"/regions\">Regions</Link>\n          <Link to=\"/cities\">Cities</Link>\n          <Link to=\"/languages\">Languages</Link>\n          <Link to=\"/currencies\">Currencies</Link>\n        </header>\n        <article className=\"App-content\">\n          <Switch>\n            <Route exact path=\"/\">\n              <HomePage />\n            </Route>\n            <Route path=\"/continents\">\n              <ContinentsPage />\n            </Route>\n            <Route path=\"/countries\">\n              <CountriesPage />\n            </Route>\n            <Route path=\"/regions\">\n              <RegionsPage />\n            </Route>\n            <Route path=\"/cities\">\n              <CitiesPage />\n            </Route>\n            <Route path=\"/languages\">\n              <LanguagesPage />\n            </Route>\n            <Route path=\"/currencies\">\n              <CurrenciesPage />\n            </Route>\n          </Switch>\n        </article>\n        <footer className=\"App-footer\">\n          <button>EXPORT DATA TO JSON</button> <button>IMPORT JSON TO DATABASE</button>\n        </footer>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}